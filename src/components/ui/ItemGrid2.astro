---
import type { ItemGrid as Props } from '~/types';
import { Icon } from 'astro-icon/components';
import { twMerge } from 'tailwind-merge';
import Button from './Button.astro';

const { items = [], columns, defaultIcon = '', classes = {} } = Astro.props;

const {
  container: containerClass = '',
  // container: containerClass = "sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3",
  panel: panelClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  icon: defaultIconClass = 'text-primary',
} = classes;
---

{
  items && (
    <div
      class={twMerge(
        `grid gap-8 gap-x-12 sm:gap-y-8 ${
          columns === 4
            ? 'lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2'
            : columns === 3
              ? 'lg:grid-cols-3 sm:grid-cols-2'
              : columns === 2
                ? 'sm:grid-cols-2 '
                : ''
        }`,
        containerClass
      )}
      role="list"
    >
      {items.map(({ title, subtitle, description, icon, callToAction, link, classes: itemClasses = {} }) => {
        const content = (
          <>
            {(title || icon || defaultIcon) && (
              <div class={twMerge('flex items-center gap-2', itemClasses?.header)}>
                {(icon || defaultIcon) && (
                  <Icon
                    name={icon || defaultIcon}
                    class={twMerge('mr-5', defaultIconClass, itemClasses?.icon)}
                    aria-hidden="true"
                  />
                )}
                {title && (
                  <div aria-label="Titel" class={twMerge('text-xl font-bold pb-5', titleClass, itemClasses?.title)}>
                    {title}
                  </div>
                )}
              </div>
            )}

            {subtitle && (
              <div aria-label="Untertitel" class={twMerge('text-xl mb-2', titleClass, itemClasses?.subtitle)}>
                â€“ {subtitle}
              </div>
            )}

            {description && (
              <p class={twMerge('text-muted', descriptionClass, itemClasses?.description)} set:html={description} />
            )}

            {callToAction && (
              <div class="mt-auto pt-2" role="presentation">
                <Button {...callToAction} />
              </div>
            )}
          </>
        );

        return (
          <div
            role="listitem"
            aria-label={title}
            class={twMerge(
              'relative flex flex-col intersect-once intersect-quarter intercept-no-queue motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade min-h-full',
              panelClass,
              itemClasses?.panel
            )}
          >
            {link ? (
              <a href={link} aria-label={title} class="contents">
                {content}
              </a>
            ) : (
              content
            )}
          </div>
        );
      })}
    </div>
  )
}
