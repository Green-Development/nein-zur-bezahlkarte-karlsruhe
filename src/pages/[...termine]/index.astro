---
import type { InferGetStaticPropsType, GetStaticPaths } from 'astro';

import merge from 'lodash.merge';
import type { ImageMetadata } from 'astro';
import Layout from '~/layouts/PageLayout.astro';
import ToEventLink from '~/components/blog/ToEventLink.astro';

import { getCanonical, getPermalink } from '~/utils/permalinks';
import { getStaticPathsEventBlogPost, blogPostRobots } from '~/utils/events';
import { findImage } from '~/utils/images';
import type { MetaData } from '~/types';
import RelatedEvents from '~/components/blog/RelatedEvents.astro';
import SingleEvent from "../../components/blog/SingleEvent.astro";

export const prerender = true;

export const getStaticPaths = (async () => {
  return await getStaticPathsEventBlogPost();
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { event } = Astro.props as Props;

const url = getCanonical(getPermalink(event.permalink, 'termine'));

const image = (await findImage(event.image)) as ImageMetadata | string | undefined;

const metadata = merge(
  {
    title: event.title,
    description: event.excerpt,
    robots: {
      index: blogPostRobots?.index,
      follow: blogPostRobots?.follow,
    },
    openGraph: {
      type: 'article',
      ...(image
        ? { images: [{ url: image, width: (image as ImageMetadata)?.width, height: (image as ImageMetadata)?.height }] }
        : {}),
    },
  },
  { ...(event?.metadata ? { ...event.metadata, canonical: event.metadata?.canonical || url } : {}) }
) as MetaData;
---

<Layout metadata={metadata}>
  <SingleEvent event={{ ...event, image: image }} url={url}>
    {event.Content ? <event.Content /> : <Fragment set:html={event.content || ''} />}
  </SingleEvent>
  <ToEventLink />
  <RelatedEvents event={event} />
</Layout>
